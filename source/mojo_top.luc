module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
    ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    .rst(rst){
      dff store_a[16];      //delay flip flops used for storing values of a,b,alufn
      dff store_b[16];
      dff store_alufn[6];
      dff counter[29];      //counter to time the switching of states

      fsm state = {START, ADD, SUBTRACT1, SUBTRACT2, ADDOVERFLOW, SUBUNDERFLOW, AND,
                   OR, XOR, A, SHL, SHR, SRA,
                   CMPEQT, CMPEQF, CMPLTT, CMPLTF,
                   CMPLET1, CMPLEF, CMPLET2, MUL, END, ERR, MANUAL};
      multi_seven_seg seg;  //using module multi_seven_seg
    }
  }
  
  sig a[16];
  sig b[16];
  sig alufn[6];
  sig out[16];
   
  alu alu1;                 //creating instance of alu
  const TIMER = 28;         //constant for clock to switch states
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;

    a = 8h0;                //initial a
    b = 8h0;                //initial b
    alufn = io_dip[0][7:2]; //setting dip switches as alufn input
    alu1.alufn = alufn;   //setting alufn
    alu1.a = a;           //setting alu a
    alu1.b = b;           //setting alu b
    out = alu1.alu;       //getting alu output
    io_led[2:1] = c{{out[15:8]},{out[7:0]}};
    io_led[0][7:5] = c{alu1.z, alu1.v, alu1.n};

    case (state.q){
      state.START:
        seg.values = {5d20,5d13,5d31,5d31}; //initialising values of seven segment display
        if(io_button[1] == 1){      //auto testing when center button is pressed
          state.d = state.ADD;}
        if(io_dip[0][0]){           //manual testing when io_dip[0][0] is pushed up
          state.d = state.MANUAL;}
    
      state.MANUAL:                   //manual test state
        a[15:0]=c{io_dip[2],io_dip[1]};
        b[15:0]=c{io_dip[2],io_dip[1]};
        if (a ==0 && b==0) {
          io_led[0][0] = 1;
          seg.values = {5d18, 5d18, 5d10, 5d18};
        }
        if(io_dip[0][1] && io_button[0]){             //if io_dip[0][1] is high and io_dip[0][2] is low, io_dip[1] and io_dip[2] become inputs for a
          store_a.d = a;
          seg.values = {5d18, 5d18, 5d10, 5d10};
        if(io_dip[0][1] && io_button[1]){             //force output to be incorrect, go to error state
          state.d=state.ERR;
          }
        } 
        if(io_dip[0][1] && io_button[2]) {            //if io_dip[0][2] is high and io_dip[0][1] is low, io_dip[1] and io_dip[2] become inputs for b
          store_b.d = b;
          seg.values = {5d18, 5d18, 5d10, 5d11};
        }
        alufn = io_dip[0][7:2];       //assigning dip switches to alufn input
        if(io_dip[0][1] && io_button[3]){             //if left button is pressed, store input alufn into a d flip flip
          store_alufn.d = alufn;
          seg.values = {5d18, 5d18, 5d10, 5d0};}
        if(io_dip[0][1] && io_button[4]){             //if right button is pressed, reset a,b,alufn
          store_a.d = 16b0;
          store_b.d = 16b0;
          store_alufn.d = 6b0;}
        alu1.a = store_a.q;         //input stored value of a into module alu
        alu1.b = store_b.q;         //input stored value of b into module alu
        alu1.alufn = store_alufn.q; //input stored value of alufn into module alu
        if(~io_dip[0][0]){          //exit manual testing when last io_dip is pushed down
          io_led[0][0]=0;
          seg.values = {5d20,5d13,5d31,5d31};
          state.d = state.START;}

      //adder
      //21845 + 4369 = 26214
      state.ADD:	
        alu1.alufn = 6b0;             //alufn for ADD
        alu1.a = 16b0101010101010101; //test input a
        alu1.b = 16b0001000100010001; //test input b
        if(io_dip[0][7]){             //making output invalid when first io_dip is pushed up
          out = out + b1;}
        if(out == 16b0110011001100110){   //correct output
          seg.values = {5d10, 5d13, 5d13, 5d31};}
        else{                             //display error on seven segment display
          seg.values = {5d14,5d20,5d20,5d31};}
        if(io_dip[0][0]){                 //manual testing when last io_dip is pushed up
          state.d = state.MANUAL;}
        counter.d = counter.q+1;                    //increment counter (clock)for every code loop
        if(io_button[4] | counter.q[TIMER]==1){     //right io_button is pressed or clock timer reaches TIMER
          counter.d = 0;
          state.d = state.SUBTRACT1;}
        if(io_button[0]){     //up io_button
          counter.d = 0;
          state.d = state.START;}

      //subtractor (positive)
      //28912 - 4288 = 24624
      state.SUBTRACT1:
        alu1.alufn = 6b1;
        alu1.a = 16b0111000011110000;	
        alu1.b = 16b0001000011000000;	
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){             //making output invalid when first io_dip is pushed up
          out = out + b1;}
        if(out == 16b0110000000110000){   //correct output
          seg.values = {5d21,5d11,5d1,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;                    //increment counter (clock) for every code loop
        if(io_button[3] | counter.q[TIMER]==1){     //left io_button is pressed, alternate left and right for debouncing
          counter.d = 0;
          state.d = state.SUBTRACT2;}
        if(io_button[2]){     //down io_button is pressed, alternate left and right for debouncing
          counter.d = 0;
          state.d = state.ADD;}

      //subtractor (negative)
      // -7 - (1) = -8
      state.SUBTRACT2:
        alu1.alufn = 6b1;		
        alu1.a = 16b1111111111111001;
        alu1.b = 16b0000000000000001;
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){             //making output invalid when first io_dip is pushed up
          out = out + b1;}
        if(out == 16b1111111111111000){   //correct output
          seg.values = {5d21,5d11,5d2,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.ADDOVERFLOW;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.SUBTRACT1;}

      //check for addition overflow
      // 32767 + 1 = -32768
      state.ADDOVERFLOW:
        alu1.alufn = 6b0;		
        alu1.a = 16b0111111111111111;	
        alu1.b = 16b0000000000000001;	
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){             //making output invalid when first io_dip is pushed up
          out = out + b1;}
        if(out == 16b1000000000000000){   //correct output
          seg.values = {5d10,5d0,5d17,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.SUBUNDERFLOW;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.SUBTRACT2;}

      //check for subtraction underflow
      // -32768 - 16384  = 16384
      state.SUBUNDERFLOW:
        alu1.alufn = 6b1;		
        alu1.a = 16b1000000000000000;
        alu1.b = 16b0100000000000000;	
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){             //making output invalid when first io_dip is pushed up
          out = out + b1;}
        if(out == 16b0100000000000000){   //correct output
          seg.values = {5d21,5d22,5d17,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.AND;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.ADDOVERFLOW;}

      //AND boolean
      state.AND:
        alu1.alufn = 6b011000;		//01 for boolean 1000 for AND operation	
        alu1.a = 16b0101010101010101;	//input a
        alu1.b = 16b1010101010101011;	//input b
        if(io_dip[0][7]){
          out = out + b1;}
        if (out == 16b0000000000000001){
            seg.values = {5d10,5d18,5d13,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.OR;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.SUBUNDERFLOW;}

      //OR boolean
      state.OR:
        alu1.alufn = 6b011110;		//1110 for OR operation
        alu1.a = 16b0001000100010001;	//input a
        alu1.b = 16b1001100110011001;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
          out = out + b1;}
        if (out == 16b1001100110011001){
            seg.values = {5d0,5d20,5d31,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.XOR;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.AND;}
          
      //XOR boolean
      state.XOR:
        alu1.alufn = 6b010110;		//0110 for XOR operation
        alu1.a = 16b0101010101010101;	//input a
        alu1.b = 16b1010101010101001;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
          out = out + b1;}
        if (out == 16b1111111111111100){
            seg.values = {5d16,5d0,5d20,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.A;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.OR;}
    
      //A boolean
      state.A:
        alu1.alufn = 6b011010;		//1010 for only A operation
        alu1.a = 16b0101010101010101;	//input a
        alu1.b = 16b1111111111111111;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
          out = out + b1;}
        if (out == 16b0101010101010101){
            seg.values = {5d10,5d31,5d31,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.SHL;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.XOR;}
          
      //check for shift left
      state.SHL:
        alu1.alufn = 6b100000;		//100000 for SHL
        alu1.a = 16b0110011100111100;	//input a
        alu1.b = 16b0000000000000010;	//input b
        if(io_dip[0][7]){
         out = out + b1;}
        if(out == 16b1001110011110000){
          seg.values = {5d21,5d16,5d17,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.SHR;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.A;}

      //check for shift right
      state.SHR:
        alu1.alufn = 6b100001;		//100001 for SHR
        alu1.a = 16b0110011100111100;	//input a
        alu1.b = 16b0000000000000100;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
         out = out + b1;}
        if(out == 16b0000011001110011){
          seg.values = {5d21,5d16,5d20,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.SRA;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.SHL;}

      //check for shift right arithmetic
      state.SRA:
        alu1.alufn = 6b100011;		//100011 for SRA  
        alu1.a = 16b1100100001100001;	//input a
        alu1.b = 16b0000000000000010;	//input b
        if(io_dip[0][0]){
           state.d = state.MANUAL;}
        if(io_dip[0][7]){
         out = out + b1;}
        if(out == 16b1111001000011000){
          seg.values = {5d21,5d20,5d10,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.CMPEQT;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.SHR;}
    
      //check for equal
      //true
      state.CMPEQT:
        alu1.alufn = 6b110011;		//11 for comparator 0011 for equal
        alu1.a = 16b0100000000000000;	//input a
        alu1.b = 16b0100000000000000;	//input b
        if(io_dip[0][7]){
          out = out + b1;}
        if(out == 16b0000000000000001){
          seg.values = {5d19,5d14,5d1,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.CMPEQF;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.SRA;}

      //check for equal
      //false
      state.CMPEQF:
        alu1.alufn = 6b110011;		//11 for comparator 0011 for equal
        alu1.a = 16b0000111111111111;	//input a
        alu1.b = 16b0000000000000000;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
          out = out + b1;}
        if(out == 16b0000000000000000){
          seg.values = {5d19,5d14,5d2,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.CMPLTT;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.CMPEQT;}
          
      //check for a < b
      //true
      state.CMPLTT:
        alu1.alufn = 6b110101;		//11 for comparator 0101 for <
        alu1.a = 16b0000000000000001;	//input a
        alu1.b = 16b0000000000000111;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
          out = out + b1;}
        if(out == 16b0000000000000001){
          seg.values = {5d19,5d17,5d1,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.CMPLTF;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.CMPEQF;}
    
      //check for a < b
      //false
      state.CMPLTF:
        alu1.alufn = 6b110101;		//11 for comparator 0101 for <
        alu1.a = 16b0000000000000001;	//input a
        alu1.b = 16b1111111111111111;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
          out = out + b1;}
        if(out == 16b0000000000000000){
          seg.values = {5d19,5d17,5d2,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.CMPLET1;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.CMPLTT;}

      //check for a <= b
      //true (less than)
      state.CMPLET1:
        alu1.alufn = 6b110111;		//11 for comparator 0111 for <=
        alu1.a = 16b1111111100001100;	//input a
        alu1.b = 16b0000000001111111;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
          out = out + b1;}
        if(out == 16b0000000000000001){
          seg.values = {5d17,5d14,5d1,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.CMPLEF;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.CMPLTF;}
             
      //check for a <= b
      //false(larger than)
      state.CMPLEF:
        alu1.alufn = 6b110111;		//11 for comparator 0111 for <=
        alu1.a = 16b0000000000001100;	//input a
        alu1.b = 16b0000000000000110;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(io_dip[0][7]){
          out = out + b1;}
        if(out == 16b0000000000000000){
          seg.values = {5d17,5d14,5d2,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.CMPLET2;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.CMPLET1;}

    
      //check for a <= b
      //true (equals to)
      state.CMPLET2:
        alu1.alufn = 6b110111;		//11 for comparator 0111 for <=
        alu1.a = 16b0000000000000111;	//input a
        alu1.b = 16b0000000000000111;	//input b
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        if(out == 16b0000000000000001){
          seg.values = {5d17,5d14,5d20,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        counter.d = counter.q+1;
        if(io_button[4] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.MUL;}
        if(io_button[0]){
          counter.d = 0;
          state.d = state.CMPLEF;}
      
      //check for a*b
      // 7 * 2 = 14
      state.MUL:
        alu1.alufn = 6b100010;		
        alu1.a = 16b0000000000000111;	
        alu1.b = 16b0000000000000010;	
        if(io_dip[0][7]){
            out = out + b1;}
        if(out == 16b0000000000001110){
          seg.values = {5d16,5d31,5d31,5d31};}
        else{                             //go to error state
          state.d = state.ERR;}
        if(io_dip[0][0]){
          state.d = state.MANUAL;}
        counter.d = counter.q+1;
        if(io_button[3] | counter.q[TIMER]==1){
          counter.d = 0;
          state.d = state.END;}
        if(io_button[2]){
          counter.d = 0;
          state.d = state.CMPLET2;}
          
      state.ERR:
        seg.values = {5d14, 5d20, 5d20, 5d31};
        if (io_button[1]) {
          state.d=state.START;}
        
      state.END:
        seg.values = {5d31,5d14,5d18,5d13};
        if(io_button[1] == 1){
           state.d = state.ADD;}
    }      
  }
}
