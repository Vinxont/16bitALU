module compare (
    input alufn[6],       
    input z,
    input v,
    input n,
    output final[16]
  ) 
  {
  
  sig out;
  
  always {
    
    case(alufn[2:1]){         //MUX alufn[2:1] are select signals 
    
      b01:                    //select signal 01, check if a == b
        out = z;
      b10:                    //select signal 10, check if a < b
        out = v^n;            
      b11:                    //select signal 11, check if a <= b
        out = (n^v)|z;        
      default:
        out = b0;
    }
    
    
    final[15:1] = 15b0;        //first 15 bits of output are 0 as we only need last digit to show the result(true or false)
    final[0] = out;           // one bit to show 1(true) and 0(false)
  }
}
